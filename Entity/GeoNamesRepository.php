<?php

namespace Ephp\GeoBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GeoNamesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GeoNamesRepository extends EntityRepository {

    /**
     * Restituisce il comune
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function getComune($latitude, $longitude) {
        $config = $this->getEntityManager()->getConfiguration();
        $config->addCustomNumericFunction('DEGREES', 'DoctrineExtensions\Query\Mysql\Degrees');
        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo.admin3_code, (
    DEGREES(
        ACOS(
            (
                SIN(
                    RADIANS(:latitude)
                ) * SIN(
                    RADIANS(geo.latitude)
                )
            ) + (
                COS(
                    RADIANS(:latitude)
                ) * COS(
                    RADIANS(geo.latitude)
                ) * COS(
                    RADIANS(:longitude - geo.longitude)
                )
            )
        )        
    ) * 111.18957696
) as distanza 
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.admin3_code != ''
   AND geo.longitude BETWEEN (:longitude - 0.1) AND (:longitude + 0.1)  
   AND geo.latitude BETWEEN (:latitude - 0.1) AND (:latitude + 0.1)  
 ORDER BY distanza
               ");
            $q->setParameter('latitude', $latitude);
            $q->setParameter('longitude', $longitude);
            $service = $q->getArrayResult();

            $admin3_code = $service[0]['admin3_code'];

            $comune = $this->findOneBy(array('admin3_code' => $admin3_code, 'feature_code' => 'ADM3'));

            return $comune;
        } catch (\Exception $e) {
            throw $e;
        }
    }

    /**
     * Restituisce il comune
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function getComuneProvincia($latitude, $longitude) {
        $config = $this->getEntityManager()->getConfiguration();
        $config->addCustomNumericFunction('DEGREES', 'DoctrineExtensions\Query\Mysql\Degrees');
        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo.admin3_code, geo.admin2_code, (
    DEGREES(
        ACOS(
            (
                SIN(
                    RADIANS(:latitude)
                ) * SIN(
                    RADIANS(geo.latitude)
                )
            ) + (
                COS(
                    RADIANS(:latitude)
                ) * COS(
                    RADIANS(geo.latitude)
                ) * COS(
                    RADIANS(:longitude - geo.longitude)
                )
            )
        )        
    ) * 111.18957696
) as distanza 
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.admin3_code != ''
   AND geo.longitude BETWEEN (:longitude - 0.1) AND (:longitude + 0.1)  
   AND geo.latitude BETWEEN (:latitude - 0.1) AND (:latitude + 0.1)  
 ORDER BY distanza
               ");
            $q->setParameter('latitude', $latitude);
            $q->setParameter('longitude', $longitude);
            $service = $q->getArrayResult();

            $admin3_code = $service[0]['admin3_code'];
            $admin2_code = $service[0]['admin2_code'];

            $comune = $this->findOneBy(array('admin3_code' => $admin3_code, 'feature_code' => 'ADM3'));
            $provincia = $this->findOneBy(array('admin2_code' => $admin2_code, 'feature_code' => 'ADM2'));

            return array('comune' => $comune, 'provincia' => $provincia);
        } catch (\Exception $e) {
            throw $e;
        }
    }

    
    /**
     * Restituisce la provincia
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function getProvincia($latitude, $longitude) {
        $config = $this->getEntityManager()->getConfiguration();
        $config->addCustomNumericFunction('DEGREES', 'DoctrineExtensions\Query\Mysql\Degrees');
        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo.admin2_code, (
    DEGREES(
        ACOS(
            (
                SIN(
                    RADIANS(:latitude)
                ) * SIN(
                    RADIANS(geo.latitude)
                )
            ) + (
                COS(
                    RADIANS(:latitude)
                ) * COS(
                    RADIANS(geo.latitude)
                ) * COS(
                    RADIANS(:longitude - geo.longitude)
                )
            )
        )        
    ) * 111.18957696
) as distanza 
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.admin2_code != ''
   AND geo.longitude BETWEEN (:longitude - 0.1) AND (:longitude + 0.1)  
   AND geo.latitude BETWEEN (:latitude - 0.1) AND (:latitude + 0.1)  
 ORDER BY distanza
               ");
            $q->setParameter('latitude', $latitude);
            $q->setParameter('longitude', $longitude);
            $service = $q->getArrayResult();

            $admin2_code = $service[0]['admin2_code'];

            $provincia = $this->findOneBy(array('admin2_code' => $admin2_code, 'feature_code' => 'ADM2'));

            return $provincia;
        } catch (\Exception $e) {
            throw $e;
        }
    }

    /*
     * Restituisce il comune
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function cercaComune($nome) {

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.feature_code = 'ADM3'
   AND geo.name LIKE :nome
 ORDER BY geo.population DESC
               ");
            $q->setParameter('nome', $nome.'%');
            $comuni = $q->execute();
            return $comuni;
        } catch (\Exception $e) {
            throw $e;
        }
    }
    
    /**
     * tira Fuori tutte le Nazioni dal Database
     */
    public function cercaNazione() {
        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo 
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.feature_code = 'PCLI'
 ORDER BY geo.name ASC
               ");
            $nazioni = $q->execute();
            return $nazioni;
        } catch (\Exception $e) {
            throw $e;
        }
    }
    
    /**
     * tira Fuori tutte le Nazioni dal Database
     * 
     *     $q->where('p.price =:prezzo');
    $q->andWhere('p.name =:nome');
    $q->setParameter('prezzo', $prezzo);
    $q->setParameter('nome', $nome);
     * 
     */
    public function selectNazioni() {
       return $this->createQueryBuilder('g')
               ->where('g.feature_code = :fc')
               ->andWhere('g.country_code =:cc')
               ->setParameter('fc', 'ADM3')
               ->setParameter('cc', 'IT')
               ->orderBy('g.name','ASC');
    }
    
    /*
     * Restituisce il comune
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function cercaTutto($nome) {

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.admin2_code != ''
   AND geo.feature_code IN ('ADM3', 'ADM4', 'ADMD', 'LTER', 'PCL', 'PCLD', 'PCLF', 
                            'PCLI', 'PCILX', 'PCLS', 'PRSH', 'TERR', 'ZN', 'ZNB', 
                            'PPL', 'PPLA', 'PPLA2', 'PPLA3', 'PPLA4', 'PPLC', 'PPLF',
                            'PPLG', 'PPLL', 'PPLQ', 'PPLR', 'PPLS', 'PPLW', 'PPLX')
   AND geo.name LIKE :nome
 ORDER BY geo.population DESC
               ");
            $q->setParameter('nome', $nome.'%');
            $comuni = $q->execute();
            return $comuni;
        } catch (\Exception $e) {
            throw $e;
        }
    }
    
    /*
     * Restituisce il comune
     *
     * @param float $latitude
     * @param float $longitude
     * @return Ephp\GeoBundle\Entity\GeoNames
     * @throws NoResultException 
     */
    public function cercaProvincia($nome) {

        try {
            $q = $this->getEntityManager()->createQuery("
SELECT geo
  FROM Ephp\GeoBundle\Entity\GeoNames geo 
 WHERE geo.feature_code = 'ADM2'
   AND geo.name LIKE :nome
 ORDER BY geo.population DESC
               ");
            $q->setParameter('nome', '%'.$nome.'%');
            $province = $q->execute();
            return $province;
        } catch (\Exception $e) {
            throw $e;
        }
    }

}

// update geo_names set population = (SELECT population FROM geo_names_fixture WHERE geo_names.geonameid = geo_names_fixture.geonameid)